~ ethos
* functional programming
* all data to be represented in data structures
* all data transformed through explicit returns in functions
* make invalid states unrepresentable
* clean, readable code

~ FUA
* immediate
    * create function to print out colored char
    * create function to accept user input
    * create a function to read local text file which shows the map of the current room 
    * create a function to read a local json file that saves player information
    * create basic player objects

* main ideas
    * make it to be like JDH's minicraft with all the same defaults except no scrolling camera
    * room-based dungeon crawler?

    * skill-tree like level up system
        * scaled difficulty
        * randomly generated quests

    * write a UI that initialises with player health, movement, charters corners of the game screen using these character codes from 185 to 188 and 200 to 205 https://theasciicode.com.ar/extended-ascii-code/box-drawings-double-vertical-line-character-ascii-code-186.html
        * player entity character creation
        * menu and settings screen
        * show enemy health as a sidebar similar to hauberk on the right side of the screen
        * render all player information separately as text as well
        * add visible inventory UI similar to minecraft / minicraft, add button that allows for placing of blocks

    * add sound for certain actions

    * mutliple-dungeon style that is procedurally generated
        * 1st legend of zelda game-like dungeon crawler, where each terminal screen reflects a whole dungeon
        * shroud dungeon in darkness till player grabs a torch and moves around
        
    * bossfight
        * minimal rhythm-based bullet-hell game 
        * movement grid-based
        * player on a small platform that fragments as boss sends shockwaves

    * multiplayer(?) => proximity chat

    * horror
        * work out building objects and light rendering diffused, vision cones
        * implement unnerving sound design

* unsorted
    * tweak user input and player controls
    * add makefile and install.sh to install game
    * add installation instructions
    * add world clock today that runs regardless of whether player is moving
    * somehow log current room player is in so i know which room i need to actively check for updates at a given time
    * create global dictionary from scratch and figure out how to render stuff from the beginning
    * save global data (all world generation terrain, item states, player and enemy states) locally saved to txt files (map) or JSON (player and other global information) on client device upon first playthrough so data can be reloaded on subsequent playthroughs
    * unique player input (reload gun/pick lock), monitor input of mouse when pressing and holding
    * read a stored text file to display the level layout
    * after completing base game, can add in option to import and draw in sprites from itch.io, ensure size of each sprite is correct and proportional to ascii characters
    * add mining and breaking of blocks to the game
    * use cellular automata rules / wfc to generate ores and their spawn rates within stone => add additional legends for these ores

* enemy path-finding AI
    * monster chases player until player out of sight and sound cones respectively
    * astar path finding for enemies
    * boss fight also

* procedural generation for terrain to text file 
    * wave function collapse?
    * destructable environments, all systems can affect other systems

~ ideas bucket
* inspiration
    * https://github.com/munificent/hauberk
    * https://github.com/jdah/microcraft
